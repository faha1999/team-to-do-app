generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

enum ProjectViewType {
  LIST
  BOARD
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

enum TaskPriority {
  P1
  P2
  P3
  P4
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum ProjectMemberRole {
  ADMIN
  EDITOR
  COMMENTER
  VIEWER
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String     @unique
  passwordHash String
  avatarUrl    String?
  timezone     String     @default("UTC")
  locale       String     @default("en")
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  sessions           Session[]
  accounts           Account[]
  memberships        TeamMembership[]
  projectMemberships ProjectMembership[]
  ownedProjects      Project[]         @relation("OwnerProjects")
  createdTasks       Task[]            @relation("CreatorTasks")
  assignedTasks      Task[]            @relation("AssigneeTasks")
  comments           Comment[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  token_type        String?
  scope             String?
  expires_at        Int?
  refresh_token     String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Team {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?
  visibility  ProjectVisibility @default(PRIVATE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  members TeamMembership[]
  projects Project[]
  labels   Label[]
}

model TeamMembership {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Project {
  id          String           @id @default(cuid())
  teamId      String?
  ownerUserId String?
  name        String
  description String?
  visibility  ProjectVisibility @default(PRIVATE)
  viewType    ProjectViewType  @default(LIST)
  status      ProjectStatus    @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  team  Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  owner User? @relation("OwnerProjects", fields: [ownerUserId], references: [id], onDelete: SetNull)

  sections Section[]
  tasks    Task[]
  members  ProjectMembership[]
}

model ProjectMembership {
  id        String            @id @default(cuid())
  projectId String
  userId    String
  role      ProjectMemberRole @default(EDITOR)
  createdAt DateTime          @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Section {
  id        String  @id @default(cuid())
  projectId String
  name      String
  position  Int     @default(0)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Label {
  id        String   @id @default(cuid())
  teamId    String?
  name      String
  color     String   @default("#818CF8")
  createdAt DateTime @default(now())

  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks TaskLabel[]
}

model Task {
  id           String       @id @default(cuid())
  projectId    String?
  sectionId    String?
  parentTaskId String?
  title        String
  description  String?
  assigneeId   String?
  creatorId    String
  dueDate      DateTime?
  startDate    DateTime?
  priority     TaskPriority @default(P3)
  status       TaskStatus   @default(OPEN)
  order        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  completedAt  DateTime?

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  parent  Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subtasks Task[]  @relation("TaskHierarchy")
  assignee User?   @relation("AssigneeTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User    @relation("CreatorTasks", fields: [creatorId], references: [id], onDelete: Cascade)

  labels   TaskLabel[]
  comments Comment[]
}

model TaskLabel {
  id      String @id @default(cuid())
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  editedAt  DateTime?

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
